public class Solution 
{
    public double FindMedianSortedArrays(int[] A, int[] B) 
    {
        if (Object.ReferenceEquals(A, null) || Object.ReferenceEquals(B, null))
        {
            throw new ArgumentNullException();
        }

        int aLen = A.Length;
        int bLen = B.Length;

        if (aLen > bLen)
        {
            Swap(ref A, ref B);
            Swap(ref aLen, ref bLen);
        }

        int leftHalfLen = (aLen + bLen + 1) / 2;

        int aMinCount = 0;
        int aMaxCount = aLen;

        while (aMinCount <= aMaxCount)
        {
            int aCount = aMinCount + ((aMaxCount - aMinCount) / 2);
            int bCount = leftHalfLen - aCount;

            if (aCount > 0 && A[aCount - 1] > B[bCount])
            {
                aMaxCount = aCount - 1;
            }
            else if (aCount < aLen && B[bCount - 1] > A[aCount])
            {
                aMinCount = aCount + 1;
            }
            else
            { 
                int leftHalfEnd = 
                    (aCount == 0)             
                        ? B[bCount - 1]       
                        : (bCount == 0)       
                            ? A[aCount - 1]   
                            : Math.Max(A[aCount - 1], B[bCount - 1]); 

                if (IsOdd(aLen + bLen))
                {
                    return leftHalfEnd;
                }
                int rightHalfStart = 
                    (aCount == aLen)          
                        ? B[bCount]           
                        : (bCount == bLen)    
                            ? A[aCount]       
                            : Math.Min(A[aCount], B[bCount]);
                return (leftHalfEnd + rightHalfStart) / 2.0;
            }
        }

        throw new InvalidOperationException("Unexpected");
    }

    private void Swap<T>(ref T x, ref T y)
    {
        T temp = x;
        x = y;
        y = temp;
    }
    private bool IsOdd(int x) => (x & 1) == 1;
}